cageNum = int(input("Количество клеток: "))
countList = []
for i in range(cageNum):
    print(f"Эффективность {i + 1} клетки: ", end= "")
    cage = int(input())
    if cage < (i + 1):
        countList.append(cage)
print("Неподходящие значения: ", end= "")
for j in countList:
    print(j, end= " ")

********************************************************************************

films = ['Крепкий орешек', 'Назад в будущее', 'Таксист',
         'Леон', 'Богемская рапсодия', 'Город грехов',
         'Мементо', 'Отступники', 'Деревня']
filmsNum = int(input("Сколько фильмов хотите добавить? "))
lovelyFilms = []
errorCount = 0
for i in range(filmsNum):
    findFilm = (input("Введите название фильма: "))
    if findFilm in films:
        lovelyFilms.append(findFilm)
    else:
        print(f"Ошибка: фильма {findFilm} у нас нет :(")
print(f"Ваш список любимых фильмов: ", end= "")
for k in lovelyFilms:
    print(k, end= " ")



********************************************************************************

nNum = int(input("Введите число N: "))
list = []
for i in range(nNum + 1):
    if i % 2 != 0:
        list.append(i)
print(f"Список из нечётных чисел от одного до {nNum}: {list}")

********************************************************************************

def reversWord():
    word1 = input("Введите слово: ")
    list1 = list(word1)
    list2 = []
    for i in list1[::-1]:
        list2 += i
    if list1 == list2:
        print("Слово является палиндромом")
    else:
        print("Слово не является палиндромом")
    reversWord()
reversWord()


********************************************************************************

fullList = ["Артемий", "Борис", "Влад", "Гоша", "Дима", "Евгений", "Женя", "Захар"]
firstDayList = []
for i in range(len(fullList)):
    if i % 2 == 0:
        firstDayList.append(fullList[i])
print(firstDayList)

********************************************************************************

word = list(input("Введите слово: "))
count = len(word)
for i in word:
    if word.count(i) >= 2:
        count -= 1
print(f"Количество уникальных букв: {count}")


********************************************************************************

number = int(input("Количество элементов: "))
numbersList = []
for _ in range(number):
    addNum = int(input("Введите элемент "))
    numbersList.append(addNum)
print(f"Изначальный список: {numbersList}")
change = int(input("Сдвиг: "))
numbersList = numbersList[-change:] + numbersList[:-change]
print(f"Сдвинутый список: {numbersList}")


********************************************************************************

number = int(input("Количество элементов: "))
numbersList = []
for _ in range(number):
    addNum = int(input("Введите элемент "))
    numbersList.append(addNum)
print(numbersList)
n = len(numbersList)
count = 0
for _ in range(n-1):
    for i in range(n-1):
        if numbersList[i] > numbersList[i + 1]:
            count += 1
            numbersList[i], numbersList[i + 1] = numbersList[i + 1], numbersList[i]
print(numbersList)
print(count)

********************************************************************************


casesCount = int(input("Количество контейнеров: "))
cases = []
caseMax = 200
for _ in range(casesCount):
    case = int(input("Введите вес контейнера "))
    if case > caseMax:
        print("Ошибка ввода!")
        continue
    caseMax = case
    cases.append(case)
print(cases)
newCase = int(input("Введите вес нового контейнера: "))
if newCase > 200:
    print("Ошибка ввода!")
for index in range(len(cases)):
    if newCase > cases[index]:
        print("Номер, который получит новый контейнер:", index + 1)
        break

********************************************************************************

GPUNum = int(input("Количество видеокарт: "))
GPUList = []
newGPUList = []
for i in range(GPUNum):
    print(f"{i + 1} видеокарта: ", end="")
    gpu = int(input())
    GPUList.append(gpu)
maximum = GPUList[0]
for j in GPUList:
    if maximum < j:
        maximum = j
for k in GPUList:
    if k != maximum:
        newGPUList.append(k)
print(newGPUList)




********************************************************************************

# TODO здесь писать код


********************************************************************************

import os

def find_file(find_path, file_count=0, subdirectory=0):
    for i_elem in os.listdir(find_path):
        new_path = os.path.join(find_path, i_elem)
        if os.path.isfile(new_path):
            file_count += 1
        if os.path.isdir(new_path):
            subdirectory += 1
            find_file(new_path)

    return file_count, subdirectory

abs_find_path = input("Путь до каталога: ")  #/Users/ivankorobov/PycharmProjects/dpo_python_basic/Module14
new_arr = find_file(abs_find_path)
print(new_arr)


********************************************************************************

import os
zen_link = '/Users/ivankorobov/PycharmProjects/dpo_python_basic/Module22/02_zen_of_python/zen.txt'
read_file = open(zen_link, 'r')
alpha_count = 0
words_count = 0
line_count = 0
max_count = 0
max_char = ''
print(max_char)
for line in read_file:
    line_count += 1
    for let in line:
        if let.isalpha():
            alpha_count += 1
        if let.isspace():
            words_count += 1
    for index, value in enumerate(line):
        if value.isalpha():
            if line.count(line[index]) >= max_count:
                max_count = line.count(line[index])
                max_char = line[index]

print('Количество букв в файле:', alpha_count)
print('Количество слов в файле:', words_count)
print('Количество строк в файле:', line_count)
print('Наиболее редкая буква:', max_char)

read_file.close()

********************************************************************************

read_file = open('zen.txt', 'r')
revers_read = read_file.readlines()
revers_read.reverse()
for i in revers_read:
    print(i, end='')
read_file.close()

********************************************************************************

# TODO здесь писать код


********************************************************************************

# TODO здесь писать код


********************************************************************************

# TODO здесь писать код


********************************************************************************

# TODO здесь писать код


********************************************************************************

numbers = 0
read_file = open('numbers.txt', 'r')
for line in read_file:
    for let in line:
        if let.isdigit():
            numbers += int(let)
read_file.close()
write_file = open("answer.txt", 'w')
write_file.write(str(numbers))
write_file.close()

********************************************************************************

def ND():
    number = int(input("Введите число: "))
    rightNum = number
    for i in range(number, 1, -1):
        if int(number % i) == float():
            rightNum = i
    print(f"Наименьший делитель, отличный от единицы: {rightNum}")
    print()
    ND()
ND()

********************************************************************************

import platform
import sys

info = 'OS info is \n{}\n\nPython version is {} {}'.format(
    platform.uname(),
    sys.version,
    platform.architecture(),
)
print(info)

with open('os_info.txt', 'w', encoding='utf8') as file:
    file.write(info)


********************************************************************************

def razbienie(number):
    count = 0
    flag = True
    celoe = ""
    ostatok = ""
    count = 0
    for i in number:
        if i == ".":
            flag = False
        elif flag:
            celoe += i
        else:
            ostatok += i
            count += 1
    celoe = int(celoe)
    ostatok = int(ostatok)
    result = inverse(celoe) + (inverse(ostatok) / 10 ** (count))
    print(f"Число наоборот: {inverse(celoe)}.{inverse(ostatok)}")
    return result

def inverse(number):
    n1 = number
    n2 = 0

    while n1 > 0:
        digit = n1 % 10
        n1 = n1 // 10
        n2 = n2 * 10
        n2 = n2 + digit
    return n2
number1 = input("Введите первое число: ")
number2 = input("Введите второе число: ")

n1 = razbienie(number1)
n2 = razbienie(number2)
print("Сумма:", n1 + n2)








********************************************************************************

def nSumm(num):
    sum = 0
    while num != 0:
        sum = sum + num % 10
        num = num // 10

    return sum
def nCount(num):
    count = 0
    while num != 0:
        count += 1
        num = num // 10

    return count
def diff(nNum):
    diff = nSumm(nNum) - nCount(nNum)
    return diff

nNum = int(input("Введите число: "))
if nNum <= 0:
    print("Ошибка ввода")
print("Сумма цифр числа:", nSumm(nNum))
print("Кол-во цифр числа:", nCount(nNum))
print("Разность суммы и количества цифр:", diff(nNum))






********************************************************************************

year1 = int(input("Введите первый год: ")) #1900
year2 = int(input("Введите второй год: ")) #2100 1911
print(f"Годы от {year1} до {year2} с тремя одинаковыми цифрами:")
while year1 <= year2:
    for i in range(10):
        if str(year1).count(str(i)) == 3:
            print(year1)
    year1 += 1

********************************************************************************

import math

def xYrfunc():
  x = float(input("Введите число X: "))
  y = float(input("Введите число Y: "))
  r = float(input("Введите радиус: "))
  c = math.sqrt((x ** 2) + (y ** 2))
  if c > r:
    print("Монетки в области нет")
  else:
    print("Монетка где-то рядом")
  xYrfunc()
xYrfunc()


********************************************************************************

print("Введите первую точку")
x1 = float(input('X: '))
y1 = float(input('Y: '))
print("\nВведите вторую точку")
x2 = float(input('X: '))
y2 = float(input('Y: '))
print("Уравнение прямой, проходящей через эти точки:")
x_diff = x1 - x2
y_diff = y1 - y2
if x_diff == 0:
    print("x =", x1)
elif y_diff == 0:
    print("y =", y1)
else:
    k = y_diff / x_diff
    b = y2 - k * x2
    print("y = ", k, " * x + ", b)


********************************************************************************

violator_songs = [
    ['World in My Eyes', 4.86],
    ['Sweetest Perfection', 4.43],
    ['Personal Jesus', 4.56],
    ['Halo', 4.9],
    ['Waiting for the Night', 6.07],
    ['Enjoy the Silence', 4.20],
    ['Policy of Truth', 4.76],
    ['Blue Dress', 4.29],
    ['Clean', 5.83]
]

songs = int(input("Сколько песен выбрать? "))
soundTime = 0
for i in range(songs):
    print(f"Название {i + 1}-й песни: ", end= "")
    song = input()
    for i in violator_songs:
        if i[0] == song:
            soundTime += i[1]
print("Общее время прослушивания:", round(soundTime, 2), "минуты")



********************************************************************************

n_num = int(input("Кол-во чисел: "))
list1 = []
list2 = []
count = 0

for _ in range(n_num):
    list1.append(int(input("Число: ")))
print("Последовательноесть:", list1)

while list1 != list1[::-1]:
    print(n_num)
    list1.insert(n_num, list1[count])
    count += 1

print("Нужно приписать чисел:", count)
print("Сами числа:", list1[:count][::-1])

********************************************************************************

guests = ['Петя', 'Ваня', 'Саша', 'Лиза', 'Катя']
def plusGuest(guests):
    guest_name = input("Имя гостя: ")
    if len(guests) >= 6:
        print(f"Прости, {guest_name}, но мест нет((")
        menu(guests)
    guests.append(guest_name)
    menu(guests)
def delGuest(guests):
    guest_name = input("Имя гостя: ")
    guests.remove(guest_name)
    menu(guests)
def menu(guests):
    print(f"\nСейчас на вечеринке {len(guests)} человек: {guests}")
    option = input("Гость пришел или ушел? ")
    if option == "пришел":
        plusGuest(guests)
    elif option == "ушел":
        delGuest(guests)
    elif option == "пора спать":
        print("Вечеринка закончилась, все легли спать.")

menu(guests)


********************************************************************************

shop = [['каретка', 1200], ['шатун', 1000], ['седло', 300],
        ['педаль', 100], ['седло', 1500], ['рама', 12000],
        ['обод', 2000], ['шатун', 200], ['седло', 2700]]

item_name = input("Название делали: ")
item_price_count = 0
item_count = 0
for i in shop:
        if i[0] == item_name:
                item_count += 1
                item_price_count += i[1]
print("Кол-во деталей —", item_count)
print("Общая стоимость —", item_price_count)

********************************************************************************

players_in_game = int(input("Кол-во человек: "))
players = list(range(1, players_in_game + 1))
game_num = int(input("Число в считалке: "))
print(f"Значит выбывает каждый {game_num}-й человек")
stop = 0

for i in range(players_in_game - 1):
    print("\nТекуший круг людей:", players)
    start = stop % len(players)
    stop = (start + game_num - 1) % len(players)
    print("Начало счета с номера", players[start])
    print("Выбывает человек под номером", players[stop])
    players.remove(players[stop])

print("\nОстался человек под номером:", *players)

********************************************************************************

a = [1, 5, 3]
b = [1, 5, 1, 5]
c = [1, 3, 1, 5, 3, 3]
a.extend(b)
print("Кол-во цифр 5 при первом объединении:", a.count(5))
for i in a:
    if i == 5:
        a.remove(5)
a.extend(c)
print("Кол-во цифр 3 при первом объединении:", a.count(3))
print("Итоговый список:", a)



********************************************************************************


combineClass = list(range(160, 176 + 1, 2))
combineClass.extend((list(range(162, 180 + 1, 3))))

print(f"Отсортированный список учеников: \n{sorted(combineClass)}")


********************************************************************************

list1 = []
list2 = []
for i in range(3):
    print(f"Введите {i + 1}-е число для первого списка: ", end="")
    num = input()
    list1.append(num)
for i in range(7):
    print(f"Введите {i + 1}-е число для первого списка: ", end="")
    num = input()
    list2.append(num)
print("Первый список:", list1)
print("Второй список:", list2)
list1.extend(list2)
for i in list1:
    if list1.count(i) > 1:
        list1.remove(i)
print("Новый первый список с уникальными элементами:", list1)

********************************************************************************

frends = []
frends_num = int(input("Кол-во друзей: "))
for i in range(frends_num):
    frends.append(0)
depts = int(input("Долговых расписок: "))
for n in range(depts):
    print(f"{n + 1}-я расписка")
    for_whom = int(input("Кому: "))
    from_whom = int(input("От кого: "))
    how_much = int(input("Сколько: "))
    if for_whom == from_whom:
        print("Так нельзя!")
    frends[for_whom - 1] -= how_much
    frends[from_whom - 1] += how_much

print("Баланс друзей:")
for i in range(frends_num):
    print(f"{i+1}: {frends[i]}")

********************************************************************************

rollers_num = int(input("Кол-во коньков: "))
rollers = []
humans = []
count = 0
for i in range(rollers_num):
    print(f"Размер {i + 1}-й пары: ", end="")
    num = input()
    rollers.append(num)
humans_num = int(input("\nКол-во людей: "))
for i in range(humans_num):
    print(f"Размер ноги {i + 1}-го человека: ", end="")
    num = input()
    humans.append(num)
for i in rollers:
    for n in humans:
        if n == i:
            rollers.remove(i)
            humans.remove(n)
            count += 1
print("\nНаибольшее кол-во людей, которые могут взять ролики:", count)


********************************************************************************

def slicer(my_tuple, num):
    if num in my_tuple:
        index1 = 0
        index2 = 0
        count = 0
        for i_index, i_elem in enumerate(my_tuple):
            if i_elem == num:
                count += 1
                if count == 2:
                    index2 = i_index
                    break
                index1 = i_index
        return my_tuple[index1:index2 + 1]
    return ()

print(slicer((1, 2, 3, 4, 5, 6, 7, 8, 2, 2, 9, 10), 2))



********************************************************************************

def record_score(table, winners):
    top_score = 0
    his_name = ''
    top_index = 0
    for i_ind, i_elem in enumerate(score_table):
        if top_score < i_elem[0]:
            top_score = i_elem[0]
            his_name = i_elem[1]
            top_index = i_ind
    score_winners.append(tuple([top_score, his_name]))
    score_table.remove(score_table[top_index])

score_table = []
score_winners = []

protocol_number = int(input("Сколько записей вносится в протокол? "))
print("Записи (результат и имя):")

for i in range(protocol_number):
    result, name = input(f"{i + 1}-я запись: ").split()
    result = int(result)
    score_table.append((result, name))

for _ in range(3):
    record_score(score_table, score_winners)

print("\nИтоги соревнований:")
for i in range(3):
    print(f"{i + 1}-е место: {score_winners[i][1]} ({score_winners[i][0]})")


********************************************************************************

original_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

new_list = [(x, x + 1) for x in original_list[::2]]

print("Оригинальный список:", original_list)
print("Новый список:", new_list)

original_list2 = [x for x in range(10)]

new_list2 = list(zip(original_list2[::2], original_list2[1::2]))

print("Оригинальный список:", original_list2)
print("Новый список:", new_list2)

********************************************************************************

phone_book = {}
def plus_contact(contacts):
    name, surname = (input("Введите имя и фамилию нового контакта (через пробел): ").split())
    name_n_surname = (name, surname)
    if name_n_surname not in contacts:
        contacts[name_n_surname] = int(input("Введите номер телефона: "))
    else:
        print("Такой человек уже есть в контактах.")
    print("Текущий словарь контактов:", contacts)
    main_menu()
def find_contact(contacts):
    second_name = input("Введите фамилию: ").lower()
    flag = True
    for i_person in contacts:
        if second_name in i_person[1].lower():
            print(i_person[1], i_person[0], contacts[i_person])
            flag = False
    if flag:
        print("Фамилия не найдена.")
    main_menu()
def main_menu():
    option = int(input("Введите номер действия:\n1. Добавить контакт\n2.Найти человека\n"))
    if option == 1:
        plus_contact(phone_book)
    elif option == 2:
        find_contact(phone_book)
    else:
        print("Ошибка ввода!")
        main_menu()

main_menu()


********************************************************************************

people = {
    ("Ivan", "Volkin"): 17,
    ("Bob", "Robbin"): 19,
    ("Anna", "Volkina"): 21,
    ("Rob", "Bobbin"): 23,
    ("Oleg", "Volkin"): 25
}
count = 0
second_name = input("Введите фамилию: ").lower()

for i_person in people:
    if second_name in i_person[1].lower():
        print(i_person[1], i_person[0], people[i_person])


********************************************************************************

def my_zip(iter1, iter2):
    return ((iter1[i], iter2[i]) for i in range(min(len(iter1), len(iter2))))


obj1 = "abcde"
obj2 = (10, 20, 30, 40)

result1 = my_zip(obj1, obj2)

print(result1)
for i in result1:
    print(i, end= "\n")






********************************************************************************

students = {
    1: {
        'name': 'Bob',
        'surname': 'Vazovski',
        'age': 23,
        'interests': ['biology, swimming']
    },
    2: {
        'name': 'Rob',
        'surname': 'Stepanov',
        'age': 24,
        'interests': ['math', 'computer games', 'running']
    },
    3: {
        'name': 'Alexander',
        'surname': 'Krug',
        'age': 22,
        'interests': ['languages', 'health food']
    }
}


def func(data):
    new_list = []
    len_count = 0
    for i in data:
        new_list += (data[i]['interests'])
        len_count += len(data[i]['surname'])
    return new_list, len_count

for i_elem in students:
    print(f"ID: {i_elem}\nВозраст: {students[i_elem]['age']}")

interests_list, len_2nd_name = func(students)
print(f"\n{interests_list}\n{len_2nd_name}")




********************************************************************************

def tpl_sort(my_tpl):
    for elem in my_tpl:
        if not isinstance(elem, int):
            return my_tpl
    return sorted(my_tpl)





my_tuple = (6, 3, -1, 8, 4, 10, -5)
print(tpl_sort(my_tuple))

********************************************************************************

def crypto(checking_list):
    return [v for i, v in enumerate(checking_list) if is_prime(i)]
def is_prime(num):
    k = 0
    for i in range(1, num + 1):
        if num % i == 0:
            k += 1
    return k == 2


********************************************************************************

players = {
    ("Ivan", "Volkin"): (10, 5, 13),
    ("Bob", "Robbin"): (7, 5, 14),
    ("Rob", "Bobbin"): (12, 8, 2)
}

new_players = [(x + players[x]) for x in players]
print(new_players)


********************************************************************************

flag = True
while flag:
    password = input("Придумайте пароль: ")
    if len(password) > 8 \
            and sum(1 for letter in password if letter.isupper()) > 0 \
            and sum(1 for letter in password if letter.isdigit()) >= 3:
        print("Это надёжный пароль!")
        flag = False
    else:
        print("Пароль ненадёжный. Попробуйте ещё раз.")

********************************************************************************

message = input("Сообщение: ")
memor = ""
new_message = ""
for letter in message:
    if letter.isalpha():
        memor += letter
    else:
        new_message += memor[::-1]
        new_message += letter
        memor = ""
print("Новое сообщение:", new_message + memor)

********************************************************************************

def decryption(messenge):
    translated = ""
    for i_word in messenge:
        if i_word in letters:
            num_index = letters.find(i_word)
            translated += letters[num_index - 1]
        else:
            translated += i_word
    return translated
def shift(text, key):
    word_ln = len(text)
    shift = key % word_ln
    text = text[-shift:] + text[:-shift]
    return text

text = 'vujgvmCfb tj ufscfu ouib z/vhm jdjuFyqm jt fscfuu uibo jdju/jnqm fTjnqm tj scfuuf ibou fy/' \
       'dpnqm yDpnqmf jt cfuufs boui dbufe/dpnqmj uGmb tj fuufsc ouib oftufe/ bstfTq jt uufscf uibo otf/' \
       'ef uzSfbebcjmj vout/dp djbmTqf dbtft (ubsfo djbmtqf hifopv up csfbl ifu t/svmf ipvhiBmu zqsbdujdbmju fbutc uz/' \
       'qvsj Fsspst tipvme wfsof qbtt foumz/tjm omfttV mjdjumzfyq odfe/tjmf Jo fui dfgb pg hvjuz-bncj gvtfsf fui ubujpoufnq up ftt/' \
       'hv Uifsf vmetip fc pof.. boe sbcmzqsfgf zpom pof pvt..pcwj xbz pu pe ju/ ' \
       'Bmuipvhi uibu bzx bzn puo cf wjpvtpc bu jstug ttvomf sfzpv( i/Evud xOp tj scfuuf ibou /' \
       'ofwfs uipvhiBm fsofw jt fopgu cfuufs boui iu++sjh x/op gJ ifu nfoubujpojnqmf tj eibs pu mbjo-fyq tju( b bec /' \
       'jefb Jg fui foubujpojnqmfn jt fbtz up bjo-fyqm ju znb cf b hppe jefb/ ' \
       'bnftqbdftO bsf pof ipoljoh sfbuh efbj .. fu(tm pe psfn gp tf"uip'.split()
letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
text_2 = []
key = 3

for i_word in text:
    text_decryption = decryption(i_word)
    shift_text = shift(text_decryption, key)
    if shift_text.endswith("/"):
        key += 1
        text_2.append(shift_text)
    else:
        text_2.append(shift_text)

text_2 = " ".join(text_2)
text_2 = text_2.replace("+", "*")
text_2 = text_2.replace("-", ",")
text_2 = text_2.replace("(", "'")
text_2 = text_2.replace("..", "--")
text_2 = text_2.replace('"', "!")
text_2 = text_2.replace("/", ".\n")
print(text_2)

********************************************************************************

text = input("Введите строку: ")
text_len = len(text)
result = ""
if text_len > 0:
    i = 0
    while i < text_len:
        count = 0
        lett = text[i:i + 1]
        while i < text_len and text[i] == lett:
            i += 1
            count += 1
        result += lett + str(count)
print("Закодированная строка:", result)




********************************************************************************

menu = input("Доступное меню: ").split(";")
new_menu = ", ".join(menu)
print("На данный момент в меню есть:", new_menu)


********************************************************************************

text = input("Введите строку: ").split()
max_lenght = 0
max_word = ""

for word in text:
    if len(word) > max_lenght:
        max_lenght = len(word)
        max_word = word

print("Самое длинное слово:", max_word)
print("Длина этого слова:", max_lenght)

********************************************************************************

str_1 = input("Первая строка: ")
str_2 = input("Вторая строка: ")
step = 0
flag = True
while True:
    str_3 = str_2[-step:] + str_2[:-step]
    if str_3 == str_1:
        print("Первая строка получается из второй со сдвигом", step)
        break
    step += 1
    if step > len(str_1):
        print("Первую строку нельзя получить из второй с помощью циклического сдвига.")
        break


********************************************************************************

file_name = input("Название файла: ")
start = ("@", "№", "$", "%", "^", "&", "*", "(", ")")
end = (".txt", ".docx")
if file_name.startswith(start):
    print("Ошибка: название начинается на один из специальных символов.")
elif not file_name.endswith(end):
    print("ошибка: неверное расширение файла. Ожидалось .txt или .docx.")
else:
    print("Файл назван верно.")



********************************************************************************

ip_adress = input("Введите IP: ")
ip_split = ip_adress.split(".")

if len(ip_split) < 4:
    print("Адрес — это четыре числа, разделённые точками.")
else:
    right_count = 0
    error_count = 0
    for x in ip_split:
        if x.isdigit():
            right_count += 1
            if int(x) > 255:
                print(x, "превышает 255.")
                error_count += 1
        else:
            print(x, "- не целое число.")
            error_count += 1
    if right_count == 4 and error_count == 0:
        print("IP-адрес корректен.")

********************************************************************************

text = input("Введите строку: ").split()
new_text = " ".join(text).title()
print("Результат:", new_text)


********************************************************************************

def histogram(string):
    sym_dict = dict()
    for sym in string:
        if sym in sym_dict:
            sym_dict[sym] += 1
        else:
            sym_dict[sym] = 1
    return sym_dict

text = input("Введите текст: ").lower()
hist = histogram(text)
print(hist)
text_dict = dict()

print("Оригинальный словарь частот:")
for i in sorted(hist.keys()):
    print(i, ":", hist[i])

print("Инвертированный словарь частот:")
for letter, num in hist.items():
    text_dict.setdefault(num, []).append(letter)
for i in text_dict:
    print(i, ":", text_dict[i])




********************************************************************************

countries_num = int(input("Кол-во стран: "))
countries_dict = {}
for i in range(countries_num):
    countries = input("{}-я страна: ".format(i + 1)).split()
    for city in countries[1:]:
        countries_dict[city] = countries[0]

for i in range(3):
    city = input("{}-й город: ".format(i + 1))
    country = countries_dict.get(city)
    if country:
        print(f"Город {city} расположен в стране {country}.")
    else:
        print(f"По городу {city} данный нет.")




********************************************************************************

violator_songs = {
    'World in My Eyes': 4.86,
    'Sweetest Perfection': 4.43,
    'Personal Jesus': 4.56,
    'Halo': 4.9,
    'Waiting for the Night': 6.07,
    'Enjoy the Silence': 4.20,
    'Policy of Truth': 4.76,
    'Blue Dress': 4.29,
    'Clean': 5.83
}

songs = int(input("Сколько песен выбрать? "))
soundTime = 0
for i in range(songs):
    print(f"Название {i + 1}-й песни: ", end= "")
    song = input()
    for elem in violator_songs:
        if song == elem:
            soundTime += violator_songs[song]
print("Общее время звучания песен:", round(soundTime, 2), "минуты")

********************************************************************************

words_pairs = int(input("Введите кол-во пар слов: "))
pairs = dict()
for i in range(words_pairs):
    pair = input("{}-я пара: ".format(i + 1)).lower()
    pair_arr = pair.split("-")
    pairs[pair_arr[0].strip()] = pair_arr[1].strip()
    pairs[pair_arr[1].strip()] = pair_arr[0].strip()

while True:
    word = input("Введите слово: ").lower()
    if word in pairs:
        print("Синоним:", pairs[word])
    elif word == "стоп":
        break
    else:
        print("Такого слова нет в словаре")



********************************************************************************

max_num = int(input("Введите максимальное число: "))
numbers = set(range(1, max_num + 1))

while True:
    guess = input("\nНужное число есть среди вот этих чисел: ")
    if guess == "Помогите!":
        break
    guess_num = {int(num) for num in guess.split()}
    answer = input("Ответ Артёма: ")
    if answer == "Да":
        numbers &= guess_num
    else:
        numbers -= guess_num

print("Артём мог загадать следующие числа:", *numbers)

********************************************************************************

people_num = int(input("Введите кол-во человек: "))
data_dict = dict()
level_dict = dict()

for i in range(1, people_num):
    child_name, parent_name = input(f"{i}-я пара: ").split()
    data_dict[child_name] = parent_name
    level_dict[child_name] = 0
    level_dict[parent_name] = 0

for i in data_dict:
    people = i
    while people in data_dict:
        people = data_dict[people]
        level_dict[i] += 1

print("\n'Высота' каждого члена семьи: ")
for i in sorted(level_dict):
    print(i, level_dict[i])


********************************************************************************

data = {
    "address": "0x544444444444",
    "ETH": {
        "balance": 444,
        "total_in": 444,
        "total_out": 4
    },
    "count_txs": 2,
    "tokens": [
        {
            "fst_token_info": {
                "address": "0x44444",
                "name": "fdf",
                "decimals": 0,
                "symbol": "dsfdsf",
                "total_supply": "3228562189",
                "owner": "0x44444",
                "last_updated": 1519022607901,
                "issuances_count": 0,
                "holders_count": 137528,
                "price": False
            },
            "balance": 5000,
            "totalIn": 0,
            "total_out": 0
        },
        {
            "sec_token_info": {
                "address": "0x44444",
                "name": "ggg",
                "decimals": "2",
                "symbol": "fff",
                "total_supply": "250000000000",
                "owner": "0x44444",
                "last_updated": 1520452201,
                "issuances_count": 0,
                "holders_count": 20707,
                "price": False
            },
            "balance": 500,
            "totalIn": 0,
            "total_out": 0
        }
    ]
}

# 1
print(data.keys())
print(data.values())
# 2
data["ETH"]["total_diff"] = 100
# 3
data["tokens"][0]["fst_token_info"]["name"] = "doge"
# 4
data["ETH"]["total_out"] = data["tokens"][0].pop("total_out")
# 5
data["tokens"][1]["sec_token_info"]["total_price"] = data["tokens"][1]["sec_token_info"].pop("price")




********************************************************************************

goods = {
    'Лампа': '12345',
    'Стол': '23456',
    'Диван': '34567',
    'Стул': '45678',
}

store = {
    '12345': [
        {'quantity': 27, 'price': 42},
    ],
    '23456': [
        {'quantity': 22, 'price': 510},
        {'quantity': 32, 'price': 520},
    ],
    '34567': [
        {'quantity': 2, 'price': 1200},
        {'quantity': 1, 'price': 1150},
    ],
    '45678': [
        {'quantity': 50, 'price': 100},
        {'quantity': 12, 'price': 95},
        {'quantity': 43, 'price': 97},
    ],
}

for name, code in goods.items():
    total_quantity = 0
    total_price = 0
    for product in store[code]:
        total_quantity += product['quantity']
        total_price += product['quantity'] * product["price"]
    print(f"{name} - {total_quantity}, стоимость {total_price} рублей")

********************************************************************************

num_of_orders = int(input("Введите кол-во заказов: "))
orders = dict()

for i in range(num_of_orders):
    order = input("{}-й заказ: ".format(i + 1)).split()
    name = order[0]
    pizza = order[1]
    amount = int(order[2])
    if name not in orders:
        orders[name] = {pizza: amount}
    else:
        if pizza not in orders[name]:
            orders[name][pizza] = amount
        else:
            orders[name][pizza] += amount

for name, order in sorted(orders.items()):
    print(f"{name}:")
    for order, amount in sorted(order.items()):
        print('\t', order, amount)


********************************************************************************

def polindrom(string):
    sym_dict = dict()
    for sym in string:
        sym_dict[sym] = sym_dict.get(sym, 0) + 1
    count = 0
    for value in sym_dict.values():
        if value % 2 != 0:
            count += 1

    return count <= 1

new_string = input("Введите строку: ")
if polindrom(new_string):
    print("Можно сделать палиндром")
else:
    print("Нельзя сделать палиндром")

********************************************************************************

# def summ(*args):
#     def flatten(a_list):
#         result = []
#         for e in a_list:
#             if isinstance(e, int):
#                 result.append(e)
#             else:
#                 result.extend(flatten(e))
#         return result
#     return sum(flatten(args))

********************************************************************************

# def my_zip(*args):
#     length = min(len(element) for element in args)
#     return [tuple(struct[i] for struct in map(list, args)) for i in range(length)]
#
# a = [1, 2, 3, 4, 5]
# b = {1: "s", 2: "q", 3: 4}
# x = (1, 2, 3, 4, 5)

********************************************************************************

nice_list = [1, 2, [3, 4], [[5, 6, 7], [8, 9, 10]],
             [[11, 12, 13], [14, 15], [16, 17, 18]]]

def sort_list(lst, new_lst=[]):
    for i in lst:
        if isinstance(i, int):
            new_lst.append(i)
        if isinstance(i, list):
            sort_list(i)
    return new_lst


********************************************************************************

site = {
    'html': {
        'head': {
            'title': 'Мой сайт'
        },
        'body': {
            'h2': 'Здесь будет мой заголовок',
            'div': 'Тут, наверное, какой-то блок',
            'p': 'А вот здесь новый абзац'
        }
    }
}

def depth(struct):
    if isinstance(struct, dict):
        return 1 + (max(map(depth, struct.values())) if struct else 0)
    return 0

def find_key(struct, key, depth):
    if depth == 0:
        return depth
    else:
        if key in struct:
            return struct[key]
        for sub_struct in struct.values():
            if isinstance(sub_struct, dict):
                result = find_key(sub_struct, key, depth - 1)
                if result:
                    break
        else:
            result = None

    return result
max_depth = depth(site)
user_key = input("Введите ключ: ")
que = input("Хотите ввести максимальную глубину? Y/N: ").lower()
if que == "y":
    find_depth = int(input("Введите максимальную глубину: "))
    value = find_key(site, user_key, depth=find_depth)
    print(value)
elif que == "n":
    value = find_key(site, user_key, depth=max_depth)
    if value:
        print(value)
    else:
        print("Такого ключа в структуре сайта нет.")

********************************************************************************

def fibonacci(n):
    if n < 2:
        return n
    return fibonacci(n - 2) + fibonacci(n - 1)

position = int(input("Введите позицию числа в ряде Фибоначчи: "))
result = fibonacci(position)
print("Число:", result)

********************************************************************************

def calculating_math_func(data, memor={}, result=1):
    if data in memor:
        result = memor[data]
    else:
        for index in range(1, data + 1):
            result *= index
        memor[data] = result
        result /= data ** 3
        result = result ** 10
    return result


********************************************************************************

import copy

site = {
    'html': {
        'head': {
            'title': 'Куплю/продам телефон недорого'
        },
        'body': {
            'h2': 'У нас самая низкая цена на телефон',
            'div': 'Купить',
            'p': 'продать'
        }
    }
}

def web_site(web, count=0, res={}):
    if count == 0:
        return
    phone = input('\nВведите название продукта для нового сайта: ')
    if phone in res:
        print(f'Сайт для {phone}:\nsite = {res[phone]}')
    else:
        web_copy = copy.deepcopy(web)
        web_copy['html']['head']['title'] = f'Куплю/продам {phone} недорого'
        web_copy['html']['body']['h2'] = f'У нас самая низкая цена на {phone}'
        res[phone] = web_copy
        for k, v in res.items():
            print(f'Сайт для {k}:\nsite = {v}')
    web_site(web, count - 1)

how_many_sites = int(input("Сколько сайтов: "))
web_site(site, how_many_sites)

********************************************************************************

def move(n, x, y):
    if n == 1:
        print(f"Переложить диск {1} со стержня номер {x} на стержень номер {y}")
    else:
        move(n - 1, x, 6 - x - y)
        print(f"Переложить диск {n} со стержня номер {x} на стержень номер {y}")
        move(n - 1, 6 - x - y, y)

n = int(input("Введите количество дисков: "))
move(n, 1, 3)

********************************************************************************

def num_func(num):
    if num == 0:
        return num
    num_func(num - 1)
    print(num)

my_num = int(input("Введите число: "))
num_func(my_num)

********************************************************************************

nice_list = [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10, 11, 12], [13, 14, 15], [16, 17, 18]]]

new_list = [elem for floor1 in nice_list for floor2 in floor1 for elem in floor2]

print(new_list)


********************************************************************************

alphabet = 'abcdefg'
copy = alphabet[:]
print("1\t", copy)
print("2\t", alphabet[::-1])
print("3\t", alphabet[::2])
print("4\t", alphabet[1::2])
print("5\t", alphabet[:1])
print("6\t", alphabet[:len(alphabet)-2:-1])
print("7\t", alphabet[3:4])
print("8\t", alphabet[len(alphabet) - 3:])
print("9\t", alphabet[3:5])
print("10\t", alphabet[4:2:-1])



********************************************************************************

text = input("Введите текст: ")
a = ["а", "о", "у", "ы", "э", "е", "ё", "и", "ю", "я"]
new_list = [x for x in text if x in a]

print("\nСписок гласных букв в слове:", new_list)
print("Длина списка:", len(new_list))

********************************************************************************

arr = [[k for k in range(i, 13, 4)]for i in range(1,5)]
print(arr)

********************************************************************************

sticks = int(input("Кол-во палок: "))
throws = int(input("Кол-во бросков: "))
row = ["I"] * sticks

for i in range(throws):
    print(f"Бросок {i + 1}. Сбиты палки с номера ", end= "")
    while True:
        start = int(input()) - 1
        if (start >= 0) and (start <= sticks):
            break
    while True:
        end = int(input("по номер "))
        if (end >= start) and (end <= sticks):
            break
    for j in range(start, end):
        row[j] = "."
    print(row)

print("Результат: ", *row)


********************************************************************************

import random

first_team = [round(random.uniform(5, 10), 2) for _ in range(20)]
print("\nПервая команда", first_team)
second_team = [round(random.uniform(5, 10), 2) for _ in range(20)]
print("\nВторая команда", second_team)
third_team = [first_team[i] if first_team[i] > second_team[i] else second_team[i] for i in range(20)]
print("\nТретья команда", third_team)


********************************************************************************


text = input('Введите строку: ')

char_indexes = [index for index, elem in enumerate(text) if elem == 'h']

start = min(char_indexes)
end = max(char_indexes)

print('Развернутая последовательность между первым и последним h:', text[end - 1:start:-1])

********************************************************************************

def cipher(string, user_shift):
    new_list = [(alphabet[(alphabet.index(sym) + user_shift) % 33] if sym != " " else " ") for sym in string]
    new_str = ""
    for i in new_list:
        new_str += i
    return new_str

alphabet = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя"
text = input("Введите строку: ")
shift = int(input("Введите сдвиг: "))

output = cipher(text, shift)

print("Зашифрованное сообщение:", output)

********************************************************************************

n_num = int(input("Введите длину списка: "))
new_arr = [1 if x % 2 == 0 else x % 5 for x in range(n_num)]
print("Результат:", new_arr)

********************************************************************************

import random
n = int(input("Количество чисел в списке: "))
arr = [random.randint(0, 2) for _ in range(n)]
print("Список до сжатия:", arr)
new_arr = [x for x in arr if x > 0]
full_arr = new_arr[:] + [0 for _ in range(len(arr) - len(new_arr))]
print("Список после сжатия:", new_arr)

********************************************************************************

